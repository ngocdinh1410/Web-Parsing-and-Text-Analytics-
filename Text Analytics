{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Import pandas to read in data\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "\n",
    "# Import models and evaluation functions\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn.naive_bayes import BernoulliNB\n",
    "from sklearn import metrics\n",
    "#from sklearn import cross_validation\n",
    "#from sklearn.model_selection import cross_validate\n",
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "# Import vectorizers to turn text into numeric\n",
    "from sklearn.feature_extraction.text import CountVectorizer\n",
    "from sklearn.feature_extraction.text import TfidfVectorizer\n",
    "\n",
    "\n",
    "# Import plotting\n",
    "import matplotlib.pylab as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read data using pandas\n",
    "user_cols=['Reviewers_Name','Rating','Review_Magazine','Review','Date']\n",
    "df = pd.read_csv(\"Homework3.txt\",sep=\"\\t\",header=None,names=user_cols)\n",
    "df['Rating'] = df['Rating'].replace(['fresh','rotten'], [1,0])\n",
    "#set fresh as 1 and rotten as 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Reviewers_Name</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Review_Magazine</th>\n",
       "      <th>Review</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Josh Larsen</td>\n",
       "      <td>1</td>\n",
       "      <td>LarsenOnFilm</td>\n",
       "      <td>Martin Scorsese's Les Miserables.</td>\n",
       "      <td>October 25, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Joshua Brown</td>\n",
       "      <td>0</td>\n",
       "      <td>London Review of Books</td>\n",
       "      <td>Gangs of New York is to Fernando Wood's Manhat...</td>\n",
       "      <td>June 27, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>PJ Nabarro</td>\n",
       "      <td>1</td>\n",
       "      <td>Patrick Nabarro</td>\n",
       "      <td>You simply have to applaud the magnitude and a...</td>\n",
       "      <td>March 16, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Namrata Joshi</td>\n",
       "      <td>1</td>\n",
       "      <td>Outlook</td>\n",
       "      <td>One of the most provocative films from Hollywo...</td>\n",
       "      <td>January 4, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Eileen Jones</td>\n",
       "      <td>0</td>\n",
       "      <td>The eXile</td>\n",
       "      <td>Gangs of New York is one of those haunting fai...</td>\n",
       "      <td>October 31, 2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2084</td>\n",
       "      <td>Andrea Thompson</td>\n",
       "      <td>1</td>\n",
       "      <td>A Reel of One's Own</td>\n",
       "      <td>Parasite conjures up images of a creature whic...</td>\n",
       "      <td>September 18, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2085</td>\n",
       "      <td>Oliver Whitney</td>\n",
       "      <td>1</td>\n",
       "      <td>GQ</td>\n",
       "      <td>An exhilarating rollercoaster ride that keeps ...</td>\n",
       "      <td>September 17, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2086</td>\n",
       "      <td>Rene Sanchez</td>\n",
       "      <td>1</td>\n",
       "      <td>Cine Sin Fronteras</td>\n",
       "      <td>A masterpiece in storytelling. Parasite is a d...</td>\n",
       "      <td>September 16, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2087</td>\n",
       "      <td>Alissa Wilkinson</td>\n",
       "      <td>1</td>\n",
       "      <td>Vox</td>\n",
       "      <td>While it's hugely entertaining, Parasite is al...</td>\n",
       "      <td>September 13, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2088</td>\n",
       "      <td>Shubhra Gupta</td>\n",
       "      <td>1</td>\n",
       "      <td>The Indian Express</td>\n",
       "      <td>Parasite is many things rolled into one: a sha...</td>\n",
       "      <td>September 13, 2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2089 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Reviewers_Name  Rating         Review_Magazine  \\\n",
       "0          Josh Larsen       1            LarsenOnFilm   \n",
       "1         Joshua Brown       0  London Review of Books   \n",
       "2           PJ Nabarro       1         Patrick Nabarro   \n",
       "3        Namrata Joshi       1                 Outlook   \n",
       "4         Eileen Jones       0               The eXile   \n",
       "...                ...     ...                     ...   \n",
       "2084   Andrea Thompson       1     A Reel of One's Own   \n",
       "2085    Oliver Whitney       1                      GQ   \n",
       "2086      Rene Sanchez       1      Cine Sin Fronteras   \n",
       "2087  Alissa Wilkinson       1                     Vox   \n",
       "2088     Shubhra Gupta       1      The Indian Express   \n",
       "\n",
       "                                                 Review                Date  \n",
       "0                     Martin Scorsese's Les Miserables.    October 25, 2019  \n",
       "1     Gangs of New York is to Fernando Wood's Manhat...       June 27, 2019  \n",
       "2     You simply have to applaud the magnitude and a...      March 16, 2019  \n",
       "3     One of the most provocative films from Hollywo...     January 4, 2019  \n",
       "4     Gangs of New York is one of those haunting fai...    October 31, 2018  \n",
       "...                                                 ...                 ...  \n",
       "2084  Parasite conjures up images of a creature whic...  September 18, 2019  \n",
       "2085  An exhilarating rollercoaster ride that keeps ...  September 17, 2019  \n",
       "2086  A masterpiece in storytelling. Parasite is a d...  September 16, 2019  \n",
       "2087  While it's hugely entertaining, Parasite is al...  September 13, 2019  \n",
       "2088  Parasite is many things rolled into one: a sha...  September 13, 2019  \n",
       "\n",
       "[2089 rows x 5 columns]"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>2089.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>0.727142</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.445535</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Rating\n",
       "count  2089.000000\n",
       "mean      0.727142\n",
       "std       0.445535\n",
       "min       0.000000\n",
       "25%       0.000000\n",
       "50%       1.000000\n",
       "75%       1.000000\n",
       "max       1.000000"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2089, 5)"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(2084, 5)"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#drop N/A values so our model can run correctly\n",
    "new_data=df.dropna()\n",
    "new_data.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Rating</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>count</td>\n",
       "      <td>2084.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>mean</td>\n",
       "      <td>0.726967</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>std</td>\n",
       "      <td>0.445624</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>min</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>25%</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>50%</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>75%</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>max</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "            Rating\n",
       "count  2084.000000\n",
       "mean      0.726967\n",
       "std       0.445624\n",
       "min       0.000000\n",
       "25%       0.000000\n",
       "50%       1.000000\n",
       "75%       1.000000\n",
       "max       1.000000"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "new_data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "    Test a set of features"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 139,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_text = new_data['Review']\n",
    "Y = new_data['Rating']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 140,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a vectorizer that will track text as binary features\n",
    "binary_vectorizer = CountVectorizer(binary=True)\n",
    "\n",
    "# Let the vectorizer learn what tokens exist in the text data\n",
    "binary_vectorizer.fit(X_text)\n",
    "\n",
    "# Turn these tokens into a numeric matrix\n",
    "X = binary_vectorizer.transform(X_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 141,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/baongocdinh/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of our classifier is 0.681\n"
     ]
    }
   ],
   "source": [
    "#modeling\n",
    "# Create a model\n",
    "logistic_regression = LogisticRegression()\n",
    "\n",
    "# Use this model and our data to get 5-fold cross validation\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "accs = cross_val_score(logistic_regression, X, Y, scoring=\"accuracy\", cv=5)\n",
    "\n",
    "# Print out the average accuracy rounded to three decimal points\n",
    "print(\"Accuracy of our classifier is \" + str(round(np.mean(accs), 3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 142,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of our classifier is 0.725\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/baongocdinh/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "# Create a vectorizer that will track text as binary features\n",
    "tfidf_vectorizer = TfidfVectorizer()\n",
    "\n",
    "# Let the vectorizer learn what tokens exist in the text data\n",
    "tfidf_vectorizer.fit(X_text)\n",
    "\n",
    "# Turn these tokens into a numeric matrix\n",
    "X = tfidf_vectorizer.transform(X_text)\n",
    "\n",
    "# Create a model\n",
    "logistic_regression = LogisticRegression()\n",
    "\n",
    "# Use this model and our data to get 5-fold cross validation AUCs\n",
    "aucs = cross_val_score(logistic_regression, X, Y, scoring=\"accuracy\", cv=5)\n",
    "\n",
    "# Print out the average AUC rounded to three decimal points\n",
    "print(\"Accuracy of our classifier is \" + str(round(np.mean(aucs), 3)))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "As we can see here, model accuracy increased by 3% due to using tfidf vectorizer. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Removing stop words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 119,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "[nltk_data] Downloading package stopwords to\n",
      "[nltk_data]     /Users/baongocdinh/nltk_data...\n",
      "[nltk_data]   Package stopwords is already up-to-date!\n"
     ]
    }
   ],
   "source": [
    "import pandas as pd\n",
    "from textblob import TextBlob\n",
    "import numpy as np\n",
    "import os\n",
    "import nltk\n",
    "nltk.download('stopwords')\n",
    "from nltk.corpus import stopwords\n",
    "stop = stopwords.words('english')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "#removing stopwords to see if the model can perform better\n",
    "user_cols=['Reviewers_Name','Rating','Review_Magazine','Review','Date']\n",
    "df_2 = pd.read_csv(\"Homework3.txt\",sep=\"\\t\",header=None,names=user_cols)\n",
    "df_2['Rating'] = df_2['Rating'].replace(['fresh','rotten'], [1,0])\n",
    "df_2_clean=df_2.dropna()\n",
    "#set fresh as 1 and rotten as 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Reviewers_Name</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Review_Magazine</th>\n",
       "      <th>Review</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Josh Larsen</td>\n",
       "      <td>1</td>\n",
       "      <td>LarsenOnFilm</td>\n",
       "      <td>Martin Scorsese's Les Miserables.</td>\n",
       "      <td>October 25, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Joshua Brown</td>\n",
       "      <td>0</td>\n",
       "      <td>London Review of Books</td>\n",
       "      <td>Gangs of New York is to Fernando Wood's Manhat...</td>\n",
       "      <td>June 27, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>PJ Nabarro</td>\n",
       "      <td>1</td>\n",
       "      <td>Patrick Nabarro</td>\n",
       "      <td>You simply have to applaud the magnitude and a...</td>\n",
       "      <td>March 16, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Namrata Joshi</td>\n",
       "      <td>1</td>\n",
       "      <td>Outlook</td>\n",
       "      <td>One of the most provocative films from Hollywo...</td>\n",
       "      <td>January 4, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Eileen Jones</td>\n",
       "      <td>0</td>\n",
       "      <td>The eXile</td>\n",
       "      <td>Gangs of New York is one of those haunting fai...</td>\n",
       "      <td>October 31, 2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2084</td>\n",
       "      <td>Andrea Thompson</td>\n",
       "      <td>1</td>\n",
       "      <td>A Reel of One's Own</td>\n",
       "      <td>Parasite conjures up images of a creature whic...</td>\n",
       "      <td>September 18, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2085</td>\n",
       "      <td>Oliver Whitney</td>\n",
       "      <td>1</td>\n",
       "      <td>GQ</td>\n",
       "      <td>An exhilarating rollercoaster ride that keeps ...</td>\n",
       "      <td>September 17, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2086</td>\n",
       "      <td>Rene Sanchez</td>\n",
       "      <td>1</td>\n",
       "      <td>Cine Sin Fronteras</td>\n",
       "      <td>A masterpiece in storytelling. Parasite is a d...</td>\n",
       "      <td>September 16, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2087</td>\n",
       "      <td>Alissa Wilkinson</td>\n",
       "      <td>1</td>\n",
       "      <td>Vox</td>\n",
       "      <td>While it's hugely entertaining, Parasite is al...</td>\n",
       "      <td>September 13, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2088</td>\n",
       "      <td>Shubhra Gupta</td>\n",
       "      <td>1</td>\n",
       "      <td>The Indian Express</td>\n",
       "      <td>Parasite is many things rolled into one: a sha...</td>\n",
       "      <td>September 13, 2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2084 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Reviewers_Name  Rating         Review_Magazine  \\\n",
       "0          Josh Larsen       1            LarsenOnFilm   \n",
       "1         Joshua Brown       0  London Review of Books   \n",
       "2           PJ Nabarro       1         Patrick Nabarro   \n",
       "3        Namrata Joshi       1                 Outlook   \n",
       "4         Eileen Jones       0               The eXile   \n",
       "...                ...     ...                     ...   \n",
       "2084   Andrea Thompson       1     A Reel of One's Own   \n",
       "2085    Oliver Whitney       1                      GQ   \n",
       "2086      Rene Sanchez       1      Cine Sin Fronteras   \n",
       "2087  Alissa Wilkinson       1                     Vox   \n",
       "2088     Shubhra Gupta       1      The Indian Express   \n",
       "\n",
       "                                                 Review                Date  \n",
       "0                     Martin Scorsese's Les Miserables.    October 25, 2019  \n",
       "1     Gangs of New York is to Fernando Wood's Manhat...       June 27, 2019  \n",
       "2     You simply have to applaud the magnitude and a...      March 16, 2019  \n",
       "3     One of the most provocative films from Hollywo...     January 4, 2019  \n",
       "4     Gangs of New York is one of those haunting fai...    October 31, 2018  \n",
       "...                                                 ...                 ...  \n",
       "2084  Parasite conjures up images of a creature whic...  September 18, 2019  \n",
       "2085  An exhilarating rollercoaster ride that keeps ...  September 17, 2019  \n",
       "2086  A masterpiece in storytelling. Parasite is a d...  September 16, 2019  \n",
       "2087  While it's hugely entertaining, Parasite is al...  September 13, 2019  \n",
       "2088  Parasite is many things rolled into one: a sha...  September 13, 2019  \n",
       "\n",
       "[2084 rows x 5 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2_clean"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 122,
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/baongocdinh/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:1: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \"\"\"Entry point for launching an IPython kernel.\n",
      "/Users/baongocdinh/opt/anaconda3/lib/python3.7/site-packages/ipykernel_launcher.py:2: SettingWithCopyWarning: \n",
      "A value is trying to be set on a copy of a slice from a DataFrame.\n",
      "Try using .loc[row_indexer,col_indexer] = value instead\n",
      "\n",
      "See the caveats in the documentation: http://pandas.pydata.org/pandas-docs/stable/user_guide/indexing.html#returning-a-view-versus-a-copy\n",
      "  \n"
     ]
    }
   ],
   "source": [
    "df_2_clean['Review'] = df_2_clean.Review.str.replace(\"[^\\w\\s]\", \"\").str.lower()\n",
    "df_2_clean['Review'] = df_2_clean['Review'].apply(lambda x: ' '.join([item for item in x.split() if item not in stop]))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 123,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Reviewers_Name</th>\n",
       "      <th>Rating</th>\n",
       "      <th>Review_Magazine</th>\n",
       "      <th>Review</th>\n",
       "      <th>Date</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Josh Larsen</td>\n",
       "      <td>1</td>\n",
       "      <td>LarsenOnFilm</td>\n",
       "      <td>martin scorseses les miserables</td>\n",
       "      <td>October 25, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Joshua Brown</td>\n",
       "      <td>0</td>\n",
       "      <td>London Review of Books</td>\n",
       "      <td>gangs new york fernando woods manhattan fellin...</td>\n",
       "      <td>June 27, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>PJ Nabarro</td>\n",
       "      <td>1</td>\n",
       "      <td>Patrick Nabarro</td>\n",
       "      <td>simply applaud magnitude ambition scorseses vi...</td>\n",
       "      <td>March 16, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>Namrata Joshi</td>\n",
       "      <td>1</td>\n",
       "      <td>Outlook</td>\n",
       "      <td>one provocative films hollywood recent times</td>\n",
       "      <td>January 4, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Eileen Jones</td>\n",
       "      <td>0</td>\n",
       "      <td>The eXile</td>\n",
       "      <td>gangs new york one haunting failures cant get ...</td>\n",
       "      <td>October 31, 2018</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2084</td>\n",
       "      <td>Andrea Thompson</td>\n",
       "      <td>1</td>\n",
       "      <td>A Reel of One's Own</td>\n",
       "      <td>parasite conjures images creature takes victim...</td>\n",
       "      <td>September 18, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2085</td>\n",
       "      <td>Oliver Whitney</td>\n",
       "      <td>1</td>\n",
       "      <td>GQ</td>\n",
       "      <td>exhilarating rollercoaster ride keeps guessing...</td>\n",
       "      <td>September 17, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2086</td>\n",
       "      <td>Rene Sanchez</td>\n",
       "      <td>1</td>\n",
       "      <td>Cine Sin Fronteras</td>\n",
       "      <td>masterpiece storytelling parasite dark twisted...</td>\n",
       "      <td>September 16, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2087</td>\n",
       "      <td>Alissa Wilkinson</td>\n",
       "      <td>1</td>\n",
       "      <td>Vox</td>\n",
       "      <td>hugely entertaining parasite also thoughtprovo...</td>\n",
       "      <td>September 13, 2019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2088</td>\n",
       "      <td>Shubhra Gupta</td>\n",
       "      <td>1</td>\n",
       "      <td>The Indian Express</td>\n",
       "      <td>parasite many things rolled one sharply observ...</td>\n",
       "      <td>September 13, 2019</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2084 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "        Reviewers_Name  Rating         Review_Magazine  \\\n",
       "0          Josh Larsen       1            LarsenOnFilm   \n",
       "1         Joshua Brown       0  London Review of Books   \n",
       "2           PJ Nabarro       1         Patrick Nabarro   \n",
       "3        Namrata Joshi       1                 Outlook   \n",
       "4         Eileen Jones       0               The eXile   \n",
       "...                ...     ...                     ...   \n",
       "2084   Andrea Thompson       1     A Reel of One's Own   \n",
       "2085    Oliver Whitney       1                      GQ   \n",
       "2086      Rene Sanchez       1      Cine Sin Fronteras   \n",
       "2087  Alissa Wilkinson       1                     Vox   \n",
       "2088     Shubhra Gupta       1      The Indian Express   \n",
       "\n",
       "                                                 Review                Date  \n",
       "0                       martin scorseses les miserables    October 25, 2019  \n",
       "1     gangs new york fernando woods manhattan fellin...       June 27, 2019  \n",
       "2     simply applaud magnitude ambition scorseses vi...      March 16, 2019  \n",
       "3          one provocative films hollywood recent times     January 4, 2019  \n",
       "4     gangs new york one haunting failures cant get ...    October 31, 2018  \n",
       "...                                                 ...                 ...  \n",
       "2084  parasite conjures images creature takes victim...  September 18, 2019  \n",
       "2085  exhilarating rollercoaster ride keeps guessing...  September 17, 2019  \n",
       "2086  masterpiece storytelling parasite dark twisted...  September 16, 2019  \n",
       "2087  hugely entertaining parasite also thoughtprovo...  September 13, 2019  \n",
       "2088  parasite many things rolled one sharply observ...  September 13, 2019  \n",
       "\n",
       "[2084 rows x 5 columns]"
      ]
     },
     "execution_count": 123,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_2_clean\n",
    "#this is how the dataframe looks like without the stop words"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 124,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_text = df_2_clean['Review']\n",
    "Y = df_2_clean['Rating']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 125,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Create a vectorizer that will track text as binary features\n",
    "binary_vectorizer = CountVectorizer(binary=True)\n",
    "\n",
    "# Let the vectorizer learn what tokens exist in the text data\n",
    "binary_vectorizer.fit(X_text)\n",
    "\n",
    "# Turn these tokens into a numeric matrix\n",
    "X = binary_vectorizer.transform(X_text)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 126,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of our classifier is 0.677\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/baongocdinh/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "#modeling\n",
    "# Create a model\n",
    "logistic_regression = LogisticRegression()\n",
    "\n",
    "# Use this model and our data to get 5-fold cross validation\n",
    "\n",
    "from sklearn.model_selection import cross_val_score\n",
    "accs = cross_val_score(logistic_regression, X, Y, scoring=\"accuracy\", cv=5)\n",
    "\n",
    "# Print out the average accuracy rounded to three decimal points\n",
    "print(\"Accuracy of our classifier is \" + str(round(np.mean(accs), 3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 127,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Accuracy of our classifier is 0.726\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/baongocdinh/opt/anaconda3/lib/python3.7/site-packages/sklearn/linear_model/logistic.py:432: FutureWarning: Default solver will be changed to 'lbfgs' in 0.22. Specify a solver to silence this warning.\n",
      "  FutureWarning)\n"
     ]
    }
   ],
   "source": [
    "# Create a vectorizer that will track text as binary features\n",
    "tfidf_vectorizer = TfidfVectorizer()\n",
    "\n",
    "# Let the vectorizer learn what tokens exist in the text data\n",
    "tfidf_vectorizer.fit(X_text)\n",
    "\n",
    "# Turn these tokens into a numeric matrix\n",
    "X = tfidf_vectorizer.transform(X_text)\n",
    "\n",
    "# Create a model\n",
    "logistic_regression = LogisticRegression()\n",
    "\n",
    "# Use this model and our data to get 5-fold cross validation AUCs\n",
    "aucs = cross_val_score(logistic_regression, X, Y, scoring=\"accuracy\", cv=5)\n",
    "\n",
    "# Print out the average AUC rounded to three decimal points\n",
    "print(\"Accuracy of our classifier is \" + str(round(np.mean(aucs), 3)))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 129,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a1ab63a90>"
      ]
     },
     "execution_count": 129,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df_2_clean[\"Rating\"].hist()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "#POSITIVE VS NEGATIVE WORDS\n",
    "# create dictionary list (positive)\n",
    "\n",
    "dict_p = []\n",
    "f = open('positive-words.txt', 'r')   \n",
    "for line in f:\n",
    "    t = line.strip().lower()\n",
    "    if t is not None and len(t) > 0:\n",
    "        dict_p.append(t)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create dictionary list (negative)\n",
    "\n",
    "dict_n = []\n",
    "f = open('negative-words.txt', 'r', encoding='ISO-8859-1') \n",
    "for line in f:\n",
    "    t = line.strip().lower()\n",
    "    if t is not None and len(t) > 0:\n",
    "         dict_n.append(t)\n",
    "f.close()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['a+',\n",
       " 'abound',\n",
       " 'abounds',\n",
       " 'abundance',\n",
       " 'abundant',\n",
       " 'accessable',\n",
       " 'accessible',\n",
       " 'acclaim',\n",
       " 'acclaimed',\n",
       " 'acclamation',\n",
       " 'accolade',\n",
       " 'accolades',\n",
       " 'accommodative',\n",
       " 'accomodative',\n",
       " 'accomplish',\n",
       " 'accomplished',\n",
       " 'accomplishment',\n",
       " 'accomplishments',\n",
       " 'accurate',\n",
       " 'accurately',\n",
       " 'achievable',\n",
       " 'achievement',\n",
       " 'achievements',\n",
       " 'achievible',\n",
       " 'acumen',\n",
       " 'adaptable',\n",
       " 'adaptive',\n",
       " 'adequate',\n",
       " 'adjustable',\n",
       " 'admirable',\n",
       " 'admirably',\n",
       " 'admiration',\n",
       " 'admire',\n",
       " 'admirer',\n",
       " 'admiring',\n",
       " 'admiringly',\n",
       " 'adorable',\n",
       " 'adore',\n",
       " 'adored',\n",
       " 'adorer',\n",
       " 'adoring',\n",
       " 'adoringly',\n",
       " 'adroit',\n",
       " 'adroitly',\n",
       " 'adulate',\n",
       " 'adulation',\n",
       " 'adulatory',\n",
       " 'advanced',\n",
       " 'advantage',\n",
       " 'advantageous',\n",
       " 'advantageously',\n",
       " 'advantages',\n",
       " 'adventuresome',\n",
       " 'adventurous',\n",
       " 'advocate',\n",
       " 'advocated',\n",
       " 'advocates',\n",
       " 'affability',\n",
       " 'affable',\n",
       " 'affably',\n",
       " 'affectation',\n",
       " 'affection',\n",
       " 'affectionate',\n",
       " 'affinity',\n",
       " 'affirm',\n",
       " 'affirmation',\n",
       " 'affirmative',\n",
       " 'affluence',\n",
       " 'affluent',\n",
       " 'afford',\n",
       " 'affordable',\n",
       " 'affordably',\n",
       " 'afordable',\n",
       " 'agile',\n",
       " 'agilely',\n",
       " 'agility',\n",
       " 'agreeable',\n",
       " 'agreeableness',\n",
       " 'agreeably',\n",
       " 'all-around',\n",
       " 'alluring',\n",
       " 'alluringly',\n",
       " 'altruistic',\n",
       " 'altruistically',\n",
       " 'amaze',\n",
       " 'amazed',\n",
       " 'amazement',\n",
       " 'amazes',\n",
       " 'amazing',\n",
       " 'amazingly',\n",
       " 'ambitious',\n",
       " 'ambitiously',\n",
       " 'ameliorate',\n",
       " 'amenable',\n",
       " 'amenity',\n",
       " 'amiability',\n",
       " 'amiabily',\n",
       " 'amiable',\n",
       " 'amicability',\n",
       " 'amicable',\n",
       " 'amicably',\n",
       " 'amity',\n",
       " 'ample',\n",
       " 'amply',\n",
       " 'amuse',\n",
       " 'amusing',\n",
       " 'amusingly',\n",
       " 'angel',\n",
       " 'angelic',\n",
       " 'apotheosis',\n",
       " 'appeal',\n",
       " 'appealing',\n",
       " 'applaud',\n",
       " 'appreciable',\n",
       " 'appreciate',\n",
       " 'appreciated',\n",
       " 'appreciates',\n",
       " 'appreciative',\n",
       " 'appreciatively',\n",
       " 'appropriate',\n",
       " 'approval',\n",
       " 'approve',\n",
       " 'ardent',\n",
       " 'ardently',\n",
       " 'ardor',\n",
       " 'articulate',\n",
       " 'aspiration',\n",
       " 'aspirations',\n",
       " 'aspire',\n",
       " 'assurance',\n",
       " 'assurances',\n",
       " 'assure',\n",
       " 'assuredly',\n",
       " 'assuring',\n",
       " 'astonish',\n",
       " 'astonished',\n",
       " 'astonishing',\n",
       " 'astonishingly',\n",
       " 'astonishment',\n",
       " 'astound',\n",
       " 'astounded',\n",
       " 'astounding',\n",
       " 'astoundingly',\n",
       " 'astutely',\n",
       " 'attentive',\n",
       " 'attraction',\n",
       " 'attractive',\n",
       " 'attractively',\n",
       " 'attune',\n",
       " 'audible',\n",
       " 'audibly',\n",
       " 'auspicious',\n",
       " 'authentic',\n",
       " 'authoritative',\n",
       " 'autonomous',\n",
       " 'available',\n",
       " 'aver',\n",
       " 'avid',\n",
       " 'avidly',\n",
       " 'award',\n",
       " 'awarded',\n",
       " 'awards',\n",
       " 'awe',\n",
       " 'awed',\n",
       " 'awesome',\n",
       " 'awesomely',\n",
       " 'awesomeness',\n",
       " 'awestruck',\n",
       " 'awsome',\n",
       " 'backbone',\n",
       " 'balanced',\n",
       " 'bargain',\n",
       " 'beauteous',\n",
       " 'beautiful',\n",
       " 'beautifullly',\n",
       " 'beautifully',\n",
       " 'beautify',\n",
       " 'beauty',\n",
       " 'beckon',\n",
       " 'beckoned',\n",
       " 'beckoning',\n",
       " 'beckons',\n",
       " 'believable',\n",
       " 'believeable',\n",
       " 'beloved',\n",
       " 'benefactor',\n",
       " 'beneficent',\n",
       " 'beneficial',\n",
       " 'beneficially',\n",
       " 'beneficiary',\n",
       " 'benefit',\n",
       " 'benefits',\n",
       " 'benevolence',\n",
       " 'benevolent',\n",
       " 'benifits',\n",
       " 'best',\n",
       " 'best-known',\n",
       " 'best-performing',\n",
       " 'best-selling',\n",
       " 'better',\n",
       " 'better-known',\n",
       " 'better-than-expected',\n",
       " 'beutifully',\n",
       " 'blameless',\n",
       " 'bless',\n",
       " 'blessing',\n",
       " 'bliss',\n",
       " 'blissful',\n",
       " 'blissfully',\n",
       " 'blithe',\n",
       " 'blockbuster',\n",
       " 'bloom',\n",
       " 'blossom',\n",
       " 'bolster',\n",
       " 'bonny',\n",
       " 'bonus',\n",
       " 'bonuses',\n",
       " 'boom',\n",
       " 'booming',\n",
       " 'boost',\n",
       " 'boundless',\n",
       " 'bountiful',\n",
       " 'brainiest',\n",
       " 'brainy',\n",
       " 'brand-new',\n",
       " 'brave',\n",
       " 'bravery',\n",
       " 'bravo',\n",
       " 'breakthrough',\n",
       " 'breakthroughs',\n",
       " 'breathlessness',\n",
       " 'breathtaking',\n",
       " 'breathtakingly',\n",
       " 'breeze',\n",
       " 'bright',\n",
       " 'brighten',\n",
       " 'brighter',\n",
       " 'brightest',\n",
       " 'brilliance',\n",
       " 'brilliances',\n",
       " 'brilliant',\n",
       " 'brilliantly',\n",
       " 'brisk',\n",
       " 'brotherly',\n",
       " 'bullish',\n",
       " 'buoyant',\n",
       " 'cajole',\n",
       " 'calm',\n",
       " 'calming',\n",
       " 'calmness',\n",
       " 'capability',\n",
       " 'capable',\n",
       " 'capably',\n",
       " 'captivate',\n",
       " 'captivating',\n",
       " 'carefree',\n",
       " 'cashback',\n",
       " 'cashbacks',\n",
       " 'catchy',\n",
       " 'celebrate',\n",
       " 'celebrated',\n",
       " 'celebration',\n",
       " 'celebratory',\n",
       " 'champ',\n",
       " 'champion',\n",
       " 'charisma',\n",
       " 'charismatic',\n",
       " 'charitable',\n",
       " 'charm',\n",
       " 'charming',\n",
       " 'charmingly',\n",
       " 'chaste',\n",
       " 'cheaper',\n",
       " 'cheapest',\n",
       " 'cheer',\n",
       " 'cheerful',\n",
       " 'cheery',\n",
       " 'cherish',\n",
       " 'cherished',\n",
       " 'cherub',\n",
       " 'chic',\n",
       " 'chivalrous',\n",
       " 'chivalry',\n",
       " 'civility',\n",
       " 'civilize',\n",
       " 'clarity',\n",
       " 'classic',\n",
       " 'classy',\n",
       " 'clean',\n",
       " 'cleaner',\n",
       " 'cleanest',\n",
       " 'cleanliness',\n",
       " 'cleanly',\n",
       " 'clear',\n",
       " 'clear-cut',\n",
       " 'cleared',\n",
       " 'clearer',\n",
       " 'clearly',\n",
       " 'clears',\n",
       " 'clever',\n",
       " 'cleverly',\n",
       " 'cohere',\n",
       " 'coherence',\n",
       " 'coherent',\n",
       " 'cohesive',\n",
       " 'colorful',\n",
       " 'comely',\n",
       " 'comfort',\n",
       " 'comfortable',\n",
       " 'comfortably',\n",
       " 'comforting',\n",
       " 'comfy',\n",
       " 'commend',\n",
       " 'commendable',\n",
       " 'commendably',\n",
       " 'commitment',\n",
       " 'commodious',\n",
       " 'compact',\n",
       " 'compactly',\n",
       " 'compassion',\n",
       " 'compassionate',\n",
       " 'compatible',\n",
       " 'competitive',\n",
       " 'complement',\n",
       " 'complementary',\n",
       " 'complemented',\n",
       " 'complements',\n",
       " 'compliant',\n",
       " 'compliment',\n",
       " 'complimentary',\n",
       " 'comprehensive',\n",
       " 'conciliate',\n",
       " 'conciliatory',\n",
       " 'concise',\n",
       " 'confidence',\n",
       " 'confident',\n",
       " 'congenial',\n",
       " 'congratulate',\n",
       " 'congratulation',\n",
       " 'congratulations',\n",
       " 'congratulatory',\n",
       " 'conscientious',\n",
       " 'considerate',\n",
       " 'consistent',\n",
       " 'consistently',\n",
       " 'constructive',\n",
       " 'consummate',\n",
       " 'contentment',\n",
       " 'continuity',\n",
       " 'contrasty',\n",
       " 'contribution',\n",
       " 'convenience',\n",
       " 'convenient',\n",
       " 'conveniently',\n",
       " 'convience',\n",
       " 'convienient',\n",
       " 'convient',\n",
       " 'convincing',\n",
       " 'convincingly',\n",
       " 'cool',\n",
       " 'coolest',\n",
       " 'cooperative',\n",
       " 'cooperatively',\n",
       " 'cornerstone',\n",
       " 'correct',\n",
       " 'correctly',\n",
       " 'cost-effective',\n",
       " 'cost-saving',\n",
       " 'counter-attack',\n",
       " 'counter-attacks',\n",
       " 'courage',\n",
       " 'courageous',\n",
       " 'courageously',\n",
       " 'courageousness',\n",
       " 'courteous',\n",
       " 'courtly',\n",
       " 'covenant',\n",
       " 'cozy',\n",
       " 'creative',\n",
       " 'credence',\n",
       " 'credible',\n",
       " 'crisp',\n",
       " 'crisper',\n",
       " 'cure',\n",
       " 'cure-all',\n",
       " 'cushy',\n",
       " 'cute',\n",
       " 'cuteness',\n",
       " 'danke',\n",
       " 'danken',\n",
       " 'daring',\n",
       " 'daringly',\n",
       " 'darling',\n",
       " 'dashing',\n",
       " 'dauntless',\n",
       " 'dawn',\n",
       " 'dazzle',\n",
       " 'dazzled',\n",
       " 'dazzling',\n",
       " 'dead-cheap',\n",
       " 'dead-on',\n",
       " 'decency',\n",
       " 'decent',\n",
       " 'decisive',\n",
       " 'decisiveness',\n",
       " 'dedicated',\n",
       " 'defeat',\n",
       " 'defeated',\n",
       " 'defeating',\n",
       " 'defeats',\n",
       " 'defender',\n",
       " 'deference',\n",
       " 'deft',\n",
       " 'deginified',\n",
       " 'delectable',\n",
       " 'delicacy',\n",
       " 'delicate',\n",
       " 'delicious',\n",
       " 'delight',\n",
       " 'delighted',\n",
       " 'delightful',\n",
       " 'delightfully',\n",
       " 'delightfulness',\n",
       " 'dependable',\n",
       " 'dependably',\n",
       " 'deservedly',\n",
       " 'deserving',\n",
       " 'desirable',\n",
       " 'desiring',\n",
       " 'desirous',\n",
       " 'destiny',\n",
       " 'detachable',\n",
       " 'devout',\n",
       " 'dexterous',\n",
       " 'dexterously',\n",
       " 'dextrous',\n",
       " 'dignified',\n",
       " 'dignify',\n",
       " 'dignity',\n",
       " 'diligence',\n",
       " 'diligent',\n",
       " 'diligently',\n",
       " 'diplomatic',\n",
       " 'dirt-cheap',\n",
       " 'distinction',\n",
       " 'distinctive',\n",
       " 'distinguished',\n",
       " 'diversified',\n",
       " 'divine',\n",
       " 'divinely',\n",
       " 'dominate',\n",
       " 'dominated',\n",
       " 'dominates',\n",
       " 'dote',\n",
       " 'dotingly',\n",
       " 'doubtless',\n",
       " 'dreamland',\n",
       " 'dumbfounded',\n",
       " 'dumbfounding',\n",
       " 'dummy-proof',\n",
       " 'durable',\n",
       " 'dynamic',\n",
       " 'eager',\n",
       " 'eagerly',\n",
       " 'eagerness',\n",
       " 'earnest',\n",
       " 'earnestly',\n",
       " 'earnestness',\n",
       " 'ease',\n",
       " 'eased',\n",
       " 'eases',\n",
       " 'easier',\n",
       " 'easiest',\n",
       " 'easiness',\n",
       " 'easing',\n",
       " 'easy',\n",
       " 'easy-to-use',\n",
       " 'easygoing',\n",
       " 'ebullience',\n",
       " 'ebullient',\n",
       " 'ebulliently',\n",
       " 'ecenomical',\n",
       " 'economical',\n",
       " 'ecstasies',\n",
       " 'ecstasy',\n",
       " 'ecstatic',\n",
       " 'ecstatically',\n",
       " 'edify',\n",
       " 'educated',\n",
       " 'effective',\n",
       " 'effectively',\n",
       " 'effectiveness',\n",
       " 'effectual',\n",
       " 'efficacious',\n",
       " 'efficient',\n",
       " 'efficiently',\n",
       " 'effortless',\n",
       " 'effortlessly',\n",
       " 'effusion',\n",
       " 'effusive',\n",
       " 'effusively',\n",
       " 'effusiveness',\n",
       " 'elan',\n",
       " 'elate',\n",
       " 'elated',\n",
       " 'elatedly',\n",
       " 'elation',\n",
       " 'electrify',\n",
       " 'elegance',\n",
       " 'elegant',\n",
       " 'elegantly',\n",
       " 'elevate',\n",
       " 'elite',\n",
       " 'eloquence',\n",
       " 'eloquent',\n",
       " 'eloquently',\n",
       " 'embolden',\n",
       " 'eminence',\n",
       " 'eminent',\n",
       " 'empathize',\n",
       " 'empathy',\n",
       " 'empower',\n",
       " 'empowerment',\n",
       " 'enchant',\n",
       " 'enchanted',\n",
       " 'enchanting',\n",
       " 'enchantingly',\n",
       " 'encourage',\n",
       " 'encouragement',\n",
       " 'encouraging',\n",
       " 'encouragingly',\n",
       " 'endear',\n",
       " 'endearing',\n",
       " 'endorse',\n",
       " 'endorsed',\n",
       " 'endorsement',\n",
       " 'endorses',\n",
       " 'endorsing',\n",
       " 'energetic',\n",
       " 'energize',\n",
       " 'energy-efficient',\n",
       " 'energy-saving',\n",
       " 'engaging',\n",
       " 'engrossing',\n",
       " 'enhance',\n",
       " 'enhanced',\n",
       " 'enhancement',\n",
       " 'enhances',\n",
       " 'enjoy',\n",
       " 'enjoyable',\n",
       " 'enjoyably',\n",
       " 'enjoyed',\n",
       " 'enjoying',\n",
       " 'enjoyment',\n",
       " 'enjoys',\n",
       " 'enlighten',\n",
       " 'enlightenment',\n",
       " 'enliven',\n",
       " 'ennoble',\n",
       " 'enough',\n",
       " 'enrapt',\n",
       " 'enrapture',\n",
       " 'enraptured',\n",
       " 'enrich',\n",
       " 'enrichment',\n",
       " 'enterprising',\n",
       " 'entertain',\n",
       " 'entertaining',\n",
       " 'entertains',\n",
       " 'enthral',\n",
       " 'enthrall',\n",
       " 'enthralled',\n",
       " 'enthuse',\n",
       " 'enthusiasm',\n",
       " 'enthusiast',\n",
       " 'enthusiastic',\n",
       " 'enthusiastically',\n",
       " 'entice',\n",
       " 'enticed',\n",
       " 'enticing',\n",
       " 'enticingly',\n",
       " 'entranced',\n",
       " 'entrancing',\n",
       " 'entrust',\n",
       " 'enviable',\n",
       " 'enviably',\n",
       " 'envious',\n",
       " 'enviously',\n",
       " 'enviousness',\n",
       " 'envy',\n",
       " 'equitable',\n",
       " 'ergonomical',\n",
       " 'err-free',\n",
       " 'erudite',\n",
       " 'ethical',\n",
       " 'eulogize',\n",
       " 'euphoria',\n",
       " 'euphoric',\n",
       " 'euphorically',\n",
       " 'evaluative',\n",
       " 'evenly',\n",
       " 'eventful',\n",
       " 'everlasting',\n",
       " 'evocative',\n",
       " 'exalt',\n",
       " 'exaltation',\n",
       " 'exalted',\n",
       " 'exaltedly',\n",
       " 'exalting',\n",
       " 'exaltingly',\n",
       " 'examplar',\n",
       " 'examplary',\n",
       " 'excallent',\n",
       " 'exceed',\n",
       " 'exceeded',\n",
       " 'exceeding',\n",
       " 'exceedingly',\n",
       " 'exceeds',\n",
       " 'excel',\n",
       " 'exceled',\n",
       " 'excelent',\n",
       " 'excellant',\n",
       " 'excelled',\n",
       " 'excellence',\n",
       " 'excellency',\n",
       " 'excellent',\n",
       " 'excellently',\n",
       " 'excels',\n",
       " 'exceptional',\n",
       " 'exceptionally',\n",
       " 'excite',\n",
       " 'excited',\n",
       " 'excitedly',\n",
       " 'excitedness',\n",
       " 'excitement',\n",
       " 'excites',\n",
       " 'exciting',\n",
       " 'excitingly',\n",
       " 'exellent',\n",
       " 'exemplar',\n",
       " 'exemplary',\n",
       " 'exhilarate',\n",
       " 'exhilarating',\n",
       " 'exhilaratingly',\n",
       " 'exhilaration',\n",
       " 'exonerate',\n",
       " 'expansive',\n",
       " 'expeditiously',\n",
       " 'expertly',\n",
       " 'exquisite',\n",
       " 'exquisitely',\n",
       " 'extol',\n",
       " 'extoll',\n",
       " 'extraordinarily',\n",
       " 'extraordinary',\n",
       " 'exuberance',\n",
       " 'exuberant',\n",
       " 'exuberantly',\n",
       " 'exult',\n",
       " 'exultant',\n",
       " 'exultation',\n",
       " 'exultingly',\n",
       " 'eye-catch',\n",
       " 'eye-catching',\n",
       " 'eyecatch',\n",
       " 'eyecatching',\n",
       " 'fabulous',\n",
       " 'fabulously',\n",
       " 'facilitate',\n",
       " 'fair',\n",
       " 'fairly',\n",
       " 'fairness',\n",
       " 'faith',\n",
       " 'faithful',\n",
       " 'faithfully',\n",
       " 'faithfulness',\n",
       " 'fame',\n",
       " 'famed',\n",
       " 'famous',\n",
       " 'famously',\n",
       " 'fancier',\n",
       " 'fancinating',\n",
       " 'fancy',\n",
       " 'fanfare',\n",
       " 'fans',\n",
       " 'fantastic',\n",
       " 'fantastically',\n",
       " 'fascinate',\n",
       " 'fascinating',\n",
       " 'fascinatingly',\n",
       " 'fascination',\n",
       " 'fashionable',\n",
       " 'fashionably',\n",
       " 'fast',\n",
       " 'fast-growing',\n",
       " 'fast-paced',\n",
       " 'faster',\n",
       " 'fastest',\n",
       " 'fastest-growing',\n",
       " 'faultless',\n",
       " 'fav',\n",
       " 'fave',\n",
       " 'favor',\n",
       " 'favorable',\n",
       " 'favored',\n",
       " 'favorite',\n",
       " 'favorited',\n",
       " 'favour',\n",
       " 'fearless',\n",
       " 'fearlessly',\n",
       " 'feasible',\n",
       " 'feasibly',\n",
       " 'feat',\n",
       " 'feature-rich',\n",
       " 'fecilitous',\n",
       " 'feisty',\n",
       " 'felicitate',\n",
       " 'felicitous',\n",
       " 'felicity',\n",
       " 'fertile',\n",
       " 'fervent',\n",
       " 'fervently',\n",
       " 'fervid',\n",
       " 'fervidly',\n",
       " 'fervor',\n",
       " 'festive',\n",
       " 'fidelity',\n",
       " 'fiery',\n",
       " 'fine',\n",
       " 'fine-looking',\n",
       " 'finely',\n",
       " 'finer',\n",
       " 'finest',\n",
       " 'firmer',\n",
       " 'first-class',\n",
       " 'first-in-class',\n",
       " 'first-rate',\n",
       " 'flashy',\n",
       " 'flatter',\n",
       " 'flattering',\n",
       " 'flatteringly',\n",
       " 'flawless',\n",
       " 'flawlessly',\n",
       " 'flexibility',\n",
       " 'flexible',\n",
       " 'flourish',\n",
       " 'flourishing',\n",
       " 'fluent',\n",
       " 'flutter',\n",
       " 'fond',\n",
       " 'fondly',\n",
       " 'fondness',\n",
       " 'foolproof',\n",
       " 'foremost',\n",
       " 'foresight',\n",
       " 'formidable',\n",
       " 'fortitude',\n",
       " 'fortuitous',\n",
       " 'fortuitously',\n",
       " 'fortunate',\n",
       " 'fortunately',\n",
       " 'fortune',\n",
       " 'fragrant',\n",
       " 'free',\n",
       " 'freed',\n",
       " 'freedom',\n",
       " 'freedoms',\n",
       " 'fresh',\n",
       " 'fresher',\n",
       " 'freshest',\n",
       " 'friendliness',\n",
       " 'friendly',\n",
       " 'frolic',\n",
       " 'frugal',\n",
       " 'fruitful',\n",
       " 'ftw',\n",
       " 'fulfillment',\n",
       " 'fun',\n",
       " 'futurestic',\n",
       " 'futuristic',\n",
       " 'gaiety',\n",
       " 'gaily',\n",
       " 'gain',\n",
       " 'gained',\n",
       " 'gainful',\n",
       " 'gainfully',\n",
       " 'gaining',\n",
       " 'gains',\n",
       " 'gallant',\n",
       " 'gallantly',\n",
       " 'galore',\n",
       " 'geekier',\n",
       " 'geeky',\n",
       " 'gem',\n",
       " 'gems',\n",
       " 'generosity',\n",
       " 'generous',\n",
       " 'generously',\n",
       " 'genial',\n",
       " 'genius',\n",
       " 'gentle',\n",
       " 'gentlest',\n",
       " 'genuine',\n",
       " 'gifted',\n",
       " 'glad',\n",
       " 'gladden',\n",
       " 'gladly',\n",
       " 'gladness',\n",
       " 'glamorous',\n",
       " 'glee',\n",
       " 'gleeful',\n",
       " 'gleefully',\n",
       " 'glimmer',\n",
       " 'glimmering',\n",
       " 'glisten',\n",
       " 'glistening',\n",
       " 'glitter',\n",
       " 'glitz',\n",
       " 'glorify',\n",
       " 'glorious',\n",
       " 'gloriously',\n",
       " 'glory',\n",
       " 'glow',\n",
       " 'glowing',\n",
       " 'glowingly',\n",
       " 'god-given',\n",
       " 'god-send',\n",
       " 'godlike',\n",
       " 'godsend',\n",
       " 'gold',\n",
       " 'golden',\n",
       " 'good',\n",
       " 'goodly',\n",
       " 'goodness',\n",
       " 'goodwill',\n",
       " 'goood',\n",
       " 'gooood',\n",
       " 'gorgeous',\n",
       " 'gorgeously',\n",
       " 'grace',\n",
       " 'graceful',\n",
       " 'gracefully',\n",
       " 'gracious',\n",
       " 'graciously',\n",
       " 'graciousness',\n",
       " 'grand',\n",
       " 'grandeur',\n",
       " 'grateful',\n",
       " 'gratefully',\n",
       " 'gratification',\n",
       " 'gratified',\n",
       " 'gratifies',\n",
       " 'gratify',\n",
       " 'gratifying',\n",
       " 'gratifyingly',\n",
       " 'gratitude',\n",
       " 'great',\n",
       " 'greatest',\n",
       " 'greatness',\n",
       " 'grin',\n",
       " 'groundbreaking',\n",
       " 'guarantee',\n",
       " 'guidance',\n",
       " 'guiltless',\n",
       " 'gumption',\n",
       " 'gush',\n",
       " 'gusto',\n",
       " 'gutsy',\n",
       " 'hail',\n",
       " 'halcyon',\n",
       " 'hale',\n",
       " 'hallmark',\n",
       " 'hallmarks',\n",
       " 'hallowed',\n",
       " 'handier',\n",
       " 'handily',\n",
       " 'hands-down',\n",
       " 'handsome',\n",
       " 'handsomely',\n",
       " 'handy',\n",
       " 'happier',\n",
       " 'happily',\n",
       " 'happiness',\n",
       " 'happy',\n",
       " 'hard-working',\n",
       " 'hardier',\n",
       " 'hardy',\n",
       " 'harmless',\n",
       " 'harmonious',\n",
       " 'harmoniously',\n",
       " 'harmonize',\n",
       " 'harmony',\n",
       " 'headway',\n",
       " 'heal',\n",
       " 'healthful',\n",
       " 'healthy',\n",
       " 'hearten',\n",
       " 'heartening',\n",
       " 'heartfelt',\n",
       " 'heartily',\n",
       " 'heartwarming',\n",
       " 'heaven',\n",
       " 'heavenly',\n",
       " 'helped',\n",
       " 'helpful',\n",
       " 'helping',\n",
       " 'hero',\n",
       " 'heroic',\n",
       " 'heroically',\n",
       " 'heroine',\n",
       " 'heroize',\n",
       " 'heros',\n",
       " 'high-quality',\n",
       " 'high-spirited',\n",
       " 'hilarious',\n",
       " 'holy',\n",
       " 'homage',\n",
       " 'honest',\n",
       " 'honesty',\n",
       " 'honor',\n",
       " 'honorable',\n",
       " 'honored',\n",
       " 'honoring',\n",
       " 'hooray',\n",
       " 'hopeful',\n",
       " 'hospitable',\n",
       " 'hot',\n",
       " 'hotcake',\n",
       " 'hotcakes',\n",
       " 'hottest',\n",
       " 'hug',\n",
       " 'humane',\n",
       " 'humble',\n",
       " 'humility',\n",
       " 'humor',\n",
       " 'humorous',\n",
       " 'humorously',\n",
       " 'humour',\n",
       " 'humourous',\n",
       " 'ideal',\n",
       " 'idealize',\n",
       " 'ideally',\n",
       " 'idol',\n",
       " 'idolize',\n",
       " 'idolized',\n",
       " 'idyllic',\n",
       " 'illuminate',\n",
       " 'illuminati',\n",
       " 'illuminating',\n",
       " 'illumine',\n",
       " 'illustrious',\n",
       " 'ilu',\n",
       " 'imaculate',\n",
       " 'imaginative',\n",
       " 'immaculate',\n",
       " 'immaculately',\n",
       " 'immense',\n",
       " 'impartial',\n",
       " 'impartiality',\n",
       " 'impartially',\n",
       " 'impassioned',\n",
       " 'impeccable',\n",
       " 'impeccably',\n",
       " 'important',\n",
       " 'impress',\n",
       " 'impressed',\n",
       " 'impresses',\n",
       " 'impressive',\n",
       " 'impressively',\n",
       " 'impressiveness',\n",
       " 'improve',\n",
       " 'improved',\n",
       " 'improvement',\n",
       " 'improvements',\n",
       " 'improves',\n",
       " 'improving',\n",
       " 'incredible',\n",
       " 'incredibly',\n",
       " 'indebted',\n",
       " 'individualized',\n",
       " 'indulgence',\n",
       " 'indulgent',\n",
       " 'industrious',\n",
       " 'inestimable',\n",
       " 'inestimably',\n",
       " 'inexpensive',\n",
       " 'infallibility',\n",
       " 'infallible',\n",
       " 'infallibly',\n",
       " 'influential',\n",
       " 'ingenious',\n",
       " 'ingeniously',\n",
       " 'ingenuity',\n",
       " 'ingenuous',\n",
       " 'ingenuously',\n",
       " 'innocuous',\n",
       " 'innovation',\n",
       " 'innovative',\n",
       " 'inpressed',\n",
       " 'insightful',\n",
       " ...]"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict_p"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['2-faced',\n",
       " '2-faces',\n",
       " 'abnormal',\n",
       " 'abolish',\n",
       " 'abominable',\n",
       " 'abominably',\n",
       " 'abominate',\n",
       " 'abomination',\n",
       " 'abort',\n",
       " 'aborted',\n",
       " 'aborts',\n",
       " 'abrade',\n",
       " 'abrasive',\n",
       " 'abrupt',\n",
       " 'abruptly',\n",
       " 'abscond',\n",
       " 'absence',\n",
       " 'absent-minded',\n",
       " 'absentee',\n",
       " 'absurd',\n",
       " 'absurdity',\n",
       " 'absurdly',\n",
       " 'absurdness',\n",
       " 'abuse',\n",
       " 'abused',\n",
       " 'abuses',\n",
       " 'abusive',\n",
       " 'abysmal',\n",
       " 'abysmally',\n",
       " 'abyss',\n",
       " 'accidental',\n",
       " 'accost',\n",
       " 'accursed',\n",
       " 'accusation',\n",
       " 'accusations',\n",
       " 'accuse',\n",
       " 'accuses',\n",
       " 'accusing',\n",
       " 'accusingly',\n",
       " 'acerbate',\n",
       " 'acerbic',\n",
       " 'acerbically',\n",
       " 'ache',\n",
       " 'ached',\n",
       " 'aches',\n",
       " 'achey',\n",
       " 'aching',\n",
       " 'acrid',\n",
       " 'acridly',\n",
       " 'acridness',\n",
       " 'acrimonious',\n",
       " 'acrimoniously',\n",
       " 'acrimony',\n",
       " 'adamant',\n",
       " 'adamantly',\n",
       " 'addict',\n",
       " 'addicted',\n",
       " 'addicting',\n",
       " 'addicts',\n",
       " 'admonish',\n",
       " 'admonisher',\n",
       " 'admonishingly',\n",
       " 'admonishment',\n",
       " 'admonition',\n",
       " 'adulterate',\n",
       " 'adulterated',\n",
       " 'adulteration',\n",
       " 'adulterier',\n",
       " 'adversarial',\n",
       " 'adversary',\n",
       " 'adverse',\n",
       " 'adversity',\n",
       " 'afflict',\n",
       " 'affliction',\n",
       " 'afflictive',\n",
       " 'affront',\n",
       " 'afraid',\n",
       " 'aggravate',\n",
       " 'aggravating',\n",
       " 'aggravation',\n",
       " 'aggression',\n",
       " 'aggressive',\n",
       " 'aggressiveness',\n",
       " 'aggressor',\n",
       " 'aggrieve',\n",
       " 'aggrieved',\n",
       " 'aggrivation',\n",
       " 'aghast',\n",
       " 'agonies',\n",
       " 'agonize',\n",
       " 'agonizing',\n",
       " 'agonizingly',\n",
       " 'agony',\n",
       " 'aground',\n",
       " 'ail',\n",
       " 'ailing',\n",
       " 'ailment',\n",
       " 'aimless',\n",
       " 'alarm',\n",
       " 'alarmed',\n",
       " 'alarming',\n",
       " 'alarmingly',\n",
       " 'alienate',\n",
       " 'alienated',\n",
       " 'alienation',\n",
       " 'allegation',\n",
       " 'allegations',\n",
       " 'allege',\n",
       " 'allergic',\n",
       " 'allergies',\n",
       " 'allergy',\n",
       " 'aloof',\n",
       " 'altercation',\n",
       " 'ambiguity',\n",
       " 'ambiguous',\n",
       " 'ambivalence',\n",
       " 'ambivalent',\n",
       " 'ambush',\n",
       " 'amiss',\n",
       " 'amputate',\n",
       " 'anarchism',\n",
       " 'anarchist',\n",
       " 'anarchistic',\n",
       " 'anarchy',\n",
       " 'anemic',\n",
       " 'anger',\n",
       " 'angrily',\n",
       " 'angriness',\n",
       " 'angry',\n",
       " 'anguish',\n",
       " 'animosity',\n",
       " 'annihilate',\n",
       " 'annihilation',\n",
       " 'annoy',\n",
       " 'annoyance',\n",
       " 'annoyances',\n",
       " 'annoyed',\n",
       " 'annoying',\n",
       " 'annoyingly',\n",
       " 'annoys',\n",
       " 'anomalous',\n",
       " 'anomaly',\n",
       " 'antagonism',\n",
       " 'antagonist',\n",
       " 'antagonistic',\n",
       " 'antagonize',\n",
       " 'anti-',\n",
       " 'anti-american',\n",
       " 'anti-israeli',\n",
       " 'anti-occupation',\n",
       " 'anti-proliferation',\n",
       " 'anti-semites',\n",
       " 'anti-social',\n",
       " 'anti-us',\n",
       " 'anti-white',\n",
       " 'antipathy',\n",
       " 'antiquated',\n",
       " 'antithetical',\n",
       " 'anxieties',\n",
       " 'anxiety',\n",
       " 'anxious',\n",
       " 'anxiously',\n",
       " 'anxiousness',\n",
       " 'apathetic',\n",
       " 'apathetically',\n",
       " 'apathy',\n",
       " 'apocalypse',\n",
       " 'apocalyptic',\n",
       " 'apologist',\n",
       " 'apologists',\n",
       " 'appal',\n",
       " 'appall',\n",
       " 'appalled',\n",
       " 'appalling',\n",
       " 'appallingly',\n",
       " 'apprehension',\n",
       " 'apprehensions',\n",
       " 'apprehensive',\n",
       " 'apprehensively',\n",
       " 'arbitrary',\n",
       " 'arcane',\n",
       " 'archaic',\n",
       " 'arduous',\n",
       " 'arduously',\n",
       " 'argumentative',\n",
       " 'arrogance',\n",
       " 'arrogant',\n",
       " 'arrogantly',\n",
       " 'ashamed',\n",
       " 'asinine',\n",
       " 'asininely',\n",
       " 'asinininity',\n",
       " 'askance',\n",
       " 'asperse',\n",
       " 'aspersion',\n",
       " 'aspersions',\n",
       " 'assail',\n",
       " 'assassin',\n",
       " 'assassinate',\n",
       " 'assault',\n",
       " 'assult',\n",
       " 'astray',\n",
       " 'asunder',\n",
       " 'atrocious',\n",
       " 'atrocities',\n",
       " 'atrocity',\n",
       " 'atrophy',\n",
       " 'attack',\n",
       " 'attacks',\n",
       " 'audacious',\n",
       " 'audaciously',\n",
       " 'audaciousness',\n",
       " 'audacity',\n",
       " 'audiciously',\n",
       " 'austere',\n",
       " 'authoritarian',\n",
       " 'autocrat',\n",
       " 'autocratic',\n",
       " 'avalanche',\n",
       " 'avarice',\n",
       " 'avaricious',\n",
       " 'avariciously',\n",
       " 'avenge',\n",
       " 'averse',\n",
       " 'aversion',\n",
       " 'aweful',\n",
       " 'awful',\n",
       " 'awfully',\n",
       " 'awfulness',\n",
       " 'awkward',\n",
       " 'awkwardness',\n",
       " 'ax',\n",
       " 'babble',\n",
       " 'back-logged',\n",
       " 'back-wood',\n",
       " 'back-woods',\n",
       " 'backache',\n",
       " 'backaches',\n",
       " 'backaching',\n",
       " 'backbite',\n",
       " 'backbiting',\n",
       " 'backward',\n",
       " 'backwardness',\n",
       " 'backwood',\n",
       " 'backwoods',\n",
       " 'bad',\n",
       " 'badly',\n",
       " 'baffle',\n",
       " 'baffled',\n",
       " 'bafflement',\n",
       " 'baffling',\n",
       " 'bait',\n",
       " 'balk',\n",
       " 'banal',\n",
       " 'banalize',\n",
       " 'bane',\n",
       " 'banish',\n",
       " 'banishment',\n",
       " 'bankrupt',\n",
       " 'barbarian',\n",
       " 'barbaric',\n",
       " 'barbarically',\n",
       " 'barbarity',\n",
       " 'barbarous',\n",
       " 'barbarously',\n",
       " 'barren',\n",
       " 'baseless',\n",
       " 'bash',\n",
       " 'bashed',\n",
       " 'bashful',\n",
       " 'bashing',\n",
       " 'bastard',\n",
       " 'bastards',\n",
       " 'battered',\n",
       " 'battering',\n",
       " 'batty',\n",
       " 'bearish',\n",
       " 'beastly',\n",
       " 'bedlam',\n",
       " 'bedlamite',\n",
       " 'befoul',\n",
       " 'beg',\n",
       " 'beggar',\n",
       " 'beggarly',\n",
       " 'begging',\n",
       " 'beguile',\n",
       " 'belabor',\n",
       " 'belated',\n",
       " 'beleaguer',\n",
       " 'belie',\n",
       " 'belittle',\n",
       " 'belittled',\n",
       " 'belittling',\n",
       " 'bellicose',\n",
       " 'belligerence',\n",
       " 'belligerent',\n",
       " 'belligerently',\n",
       " 'bemoan',\n",
       " 'bemoaning',\n",
       " 'bemused',\n",
       " 'bent',\n",
       " 'berate',\n",
       " 'bereave',\n",
       " 'bereavement',\n",
       " 'bereft',\n",
       " 'berserk',\n",
       " 'beseech',\n",
       " 'beset',\n",
       " 'besiege',\n",
       " 'besmirch',\n",
       " 'bestial',\n",
       " 'betray',\n",
       " 'betrayal',\n",
       " 'betrayals',\n",
       " 'betrayer',\n",
       " 'betraying',\n",
       " 'betrays',\n",
       " 'bewail',\n",
       " 'beware',\n",
       " 'bewilder',\n",
       " 'bewildered',\n",
       " 'bewildering',\n",
       " 'bewilderingly',\n",
       " 'bewilderment',\n",
       " 'bewitch',\n",
       " 'bias',\n",
       " 'biased',\n",
       " 'biases',\n",
       " 'bicker',\n",
       " 'bickering',\n",
       " 'bid-rigging',\n",
       " 'bigotries',\n",
       " 'bigotry',\n",
       " 'bitch',\n",
       " 'bitchy',\n",
       " 'biting',\n",
       " 'bitingly',\n",
       " 'bitter',\n",
       " 'bitterly',\n",
       " 'bitterness',\n",
       " 'bizarre',\n",
       " 'blab',\n",
       " 'blabber',\n",
       " 'blackmail',\n",
       " 'blah',\n",
       " 'blame',\n",
       " 'blameworthy',\n",
       " 'bland',\n",
       " 'blandish',\n",
       " 'blaspheme',\n",
       " 'blasphemous',\n",
       " 'blasphemy',\n",
       " 'blasted',\n",
       " 'blatant',\n",
       " 'blatantly',\n",
       " 'blather',\n",
       " 'bleak',\n",
       " 'bleakly',\n",
       " 'bleakness',\n",
       " 'bleed',\n",
       " 'bleeding',\n",
       " 'bleeds',\n",
       " 'blemish',\n",
       " 'blind',\n",
       " 'blinding',\n",
       " 'blindingly',\n",
       " 'blindside',\n",
       " 'blister',\n",
       " 'blistering',\n",
       " 'bloated',\n",
       " 'blockage',\n",
       " 'blockhead',\n",
       " 'bloodshed',\n",
       " 'bloodthirsty',\n",
       " 'bloody',\n",
       " 'blotchy',\n",
       " 'blow',\n",
       " 'blunder',\n",
       " 'blundering',\n",
       " 'blunders',\n",
       " 'blunt',\n",
       " 'blur',\n",
       " 'bluring',\n",
       " 'blurred',\n",
       " 'blurring',\n",
       " 'blurry',\n",
       " 'blurs',\n",
       " 'blurt',\n",
       " 'boastful',\n",
       " 'boggle',\n",
       " 'bogus',\n",
       " 'boil',\n",
       " 'boiling',\n",
       " 'boisterous',\n",
       " 'bomb',\n",
       " 'bombard',\n",
       " 'bombardment',\n",
       " 'bombastic',\n",
       " 'bondage',\n",
       " 'bonkers',\n",
       " 'bore',\n",
       " 'bored',\n",
       " 'boredom',\n",
       " 'bores',\n",
       " 'boring',\n",
       " 'botch',\n",
       " 'bother',\n",
       " 'bothered',\n",
       " 'bothering',\n",
       " 'bothers',\n",
       " 'bothersome',\n",
       " 'bowdlerize',\n",
       " 'boycott',\n",
       " 'braggart',\n",
       " 'bragger',\n",
       " 'brainless',\n",
       " 'brainwash',\n",
       " 'brash',\n",
       " 'brashly',\n",
       " 'brashness',\n",
       " 'brat',\n",
       " 'bravado',\n",
       " 'brazen',\n",
       " 'brazenly',\n",
       " 'brazenness',\n",
       " 'breach',\n",
       " 'break',\n",
       " 'break-up',\n",
       " 'break-ups',\n",
       " 'breakdown',\n",
       " 'breaking',\n",
       " 'breaks',\n",
       " 'breakup',\n",
       " 'breakups',\n",
       " 'bribery',\n",
       " 'brimstone',\n",
       " 'bristle',\n",
       " 'brittle',\n",
       " 'broke',\n",
       " 'broken',\n",
       " 'broken-hearted',\n",
       " 'brood',\n",
       " 'browbeat',\n",
       " 'bruise',\n",
       " 'bruised',\n",
       " 'bruises',\n",
       " 'bruising',\n",
       " 'brusque',\n",
       " 'brutal',\n",
       " 'brutalising',\n",
       " 'brutalities',\n",
       " 'brutality',\n",
       " 'brutalize',\n",
       " 'brutalizing',\n",
       " 'brutally',\n",
       " 'brute',\n",
       " 'brutish',\n",
       " 'bs',\n",
       " 'buckle',\n",
       " 'bug',\n",
       " 'bugging',\n",
       " 'buggy',\n",
       " 'bugs',\n",
       " 'bulkier',\n",
       " 'bulkiness',\n",
       " 'bulky',\n",
       " 'bulkyness',\n",
       " 'bull****',\n",
       " 'bull----',\n",
       " 'bullies',\n",
       " 'bullshit',\n",
       " 'bullshyt',\n",
       " 'bully',\n",
       " 'bullying',\n",
       " 'bullyingly',\n",
       " 'bum',\n",
       " 'bump',\n",
       " 'bumped',\n",
       " 'bumping',\n",
       " 'bumpping',\n",
       " 'bumps',\n",
       " 'bumpy',\n",
       " 'bungle',\n",
       " 'bungler',\n",
       " 'bungling',\n",
       " 'bunk',\n",
       " 'burden',\n",
       " 'burdensome',\n",
       " 'burdensomely',\n",
       " 'burn',\n",
       " 'burned',\n",
       " 'burning',\n",
       " 'burns',\n",
       " 'bust',\n",
       " 'busts',\n",
       " 'busybody',\n",
       " 'butcher',\n",
       " 'butchery',\n",
       " 'buzzing',\n",
       " 'byzantine',\n",
       " 'cackle',\n",
       " 'calamities',\n",
       " 'calamitous',\n",
       " 'calamitously',\n",
       " 'calamity',\n",
       " 'callous',\n",
       " 'calumniate',\n",
       " 'calumniation',\n",
       " 'calumnies',\n",
       " 'calumnious',\n",
       " 'calumniously',\n",
       " 'calumny',\n",
       " 'cancer',\n",
       " 'cancerous',\n",
       " 'cannibal',\n",
       " 'cannibalize',\n",
       " 'capitulate',\n",
       " 'capricious',\n",
       " 'capriciously',\n",
       " 'capriciousness',\n",
       " 'capsize',\n",
       " 'careless',\n",
       " 'carelessness',\n",
       " 'caricature',\n",
       " 'carnage',\n",
       " 'carp',\n",
       " 'cartoonish',\n",
       " 'cash-strapped',\n",
       " 'castigate',\n",
       " 'castrated',\n",
       " 'casualty',\n",
       " 'cataclysm',\n",
       " 'cataclysmal',\n",
       " 'cataclysmic',\n",
       " 'cataclysmically',\n",
       " 'catastrophe',\n",
       " 'catastrophes',\n",
       " 'catastrophic',\n",
       " 'catastrophically',\n",
       " 'catastrophies',\n",
       " 'caustic',\n",
       " 'caustically',\n",
       " 'cautionary',\n",
       " 'cave',\n",
       " 'censure',\n",
       " 'chafe',\n",
       " 'chaff',\n",
       " 'chagrin',\n",
       " 'challenging',\n",
       " 'chaos',\n",
       " 'chaotic',\n",
       " 'chasten',\n",
       " 'chastise',\n",
       " 'chastisement',\n",
       " 'chatter',\n",
       " 'chatterbox',\n",
       " 'cheap',\n",
       " 'cheapen',\n",
       " 'cheaply',\n",
       " 'cheat',\n",
       " 'cheated',\n",
       " 'cheater',\n",
       " 'cheating',\n",
       " 'cheats',\n",
       " 'checkered',\n",
       " 'cheerless',\n",
       " 'cheesy',\n",
       " 'chide',\n",
       " 'childish',\n",
       " 'chill',\n",
       " 'chilly',\n",
       " 'chintzy',\n",
       " 'choke',\n",
       " 'choleric',\n",
       " 'choppy',\n",
       " 'chore',\n",
       " 'chronic',\n",
       " 'chunky',\n",
       " 'clamor',\n",
       " 'clamorous',\n",
       " 'clash',\n",
       " 'cliche',\n",
       " 'cliched',\n",
       " 'clique',\n",
       " 'clog',\n",
       " 'clogged',\n",
       " 'clogs',\n",
       " 'cloud',\n",
       " 'clouding',\n",
       " 'cloudy',\n",
       " 'clueless',\n",
       " 'clumsy',\n",
       " 'clunky',\n",
       " 'coarse',\n",
       " 'cocky',\n",
       " 'coerce',\n",
       " 'coercion',\n",
       " 'coercive',\n",
       " 'cold',\n",
       " 'coldly',\n",
       " 'collapse',\n",
       " 'collude',\n",
       " 'collusion',\n",
       " 'combative',\n",
       " 'combust',\n",
       " 'comical',\n",
       " 'commiserate',\n",
       " 'commonplace',\n",
       " 'commotion',\n",
       " 'commotions',\n",
       " 'complacent',\n",
       " 'complain',\n",
       " 'complained',\n",
       " 'complaining',\n",
       " 'complains',\n",
       " 'complaint',\n",
       " 'complaints',\n",
       " 'complex',\n",
       " 'complicated',\n",
       " 'complication',\n",
       " 'complicit',\n",
       " 'compulsion',\n",
       " 'compulsive',\n",
       " 'concede',\n",
       " 'conceded',\n",
       " 'conceit',\n",
       " 'conceited',\n",
       " 'concen',\n",
       " 'concens',\n",
       " 'concern',\n",
       " 'concerned',\n",
       " 'concerns',\n",
       " 'concession',\n",
       " 'concessions',\n",
       " 'condemn',\n",
       " 'condemnable',\n",
       " 'condemnation',\n",
       " 'condemned',\n",
       " 'condemns',\n",
       " 'condescend',\n",
       " 'condescending',\n",
       " 'condescendingly',\n",
       " 'condescension',\n",
       " 'confess',\n",
       " 'confession',\n",
       " 'confessions',\n",
       " 'confined',\n",
       " 'conflict',\n",
       " 'conflicted',\n",
       " 'conflicting',\n",
       " 'conflicts',\n",
       " 'confound',\n",
       " 'confounded',\n",
       " 'confounding',\n",
       " 'confront',\n",
       " 'confrontation',\n",
       " 'confrontational',\n",
       " 'confuse',\n",
       " 'confused',\n",
       " 'confuses',\n",
       " 'confusing',\n",
       " 'confusion',\n",
       " 'confusions',\n",
       " 'congested',\n",
       " 'congestion',\n",
       " 'cons',\n",
       " 'conscons',\n",
       " 'conservative',\n",
       " 'conspicuous',\n",
       " 'conspicuously',\n",
       " 'conspiracies',\n",
       " 'conspiracy',\n",
       " 'conspirator',\n",
       " 'conspiratorial',\n",
       " 'conspire',\n",
       " 'consternation',\n",
       " 'contagious',\n",
       " 'contaminate',\n",
       " 'contaminated',\n",
       " 'contaminates',\n",
       " 'contaminating',\n",
       " 'contamination',\n",
       " 'contempt',\n",
       " 'contemptible',\n",
       " 'contemptuous',\n",
       " 'contemptuously',\n",
       " 'contend',\n",
       " 'contention',\n",
       " 'contentious',\n",
       " 'contort',\n",
       " 'contortions',\n",
       " 'contradict',\n",
       " 'contradiction',\n",
       " 'contradictory',\n",
       " 'contrariness',\n",
       " 'contravene',\n",
       " 'contrive',\n",
       " 'contrived',\n",
       " 'controversial',\n",
       " 'controversy',\n",
       " 'convoluted',\n",
       " 'corrode',\n",
       " 'corrosion',\n",
       " 'corrosions',\n",
       " 'corrosive',\n",
       " 'corrupt',\n",
       " 'corrupted',\n",
       " 'corrupting',\n",
       " 'corruption',\n",
       " 'corrupts',\n",
       " 'corruptted',\n",
       " 'costlier',\n",
       " 'costly',\n",
       " 'counter-productive',\n",
       " 'counterproductive',\n",
       " 'coupists',\n",
       " 'covetous',\n",
       " 'coward',\n",
       " 'cowardly',\n",
       " 'crabby',\n",
       " 'crack',\n",
       " 'cracked',\n",
       " 'cracks',\n",
       " 'craftily',\n",
       " 'craftly',\n",
       " 'crafty',\n",
       " 'cramp',\n",
       " 'cramped',\n",
       " 'cramping',\n",
       " 'cranky',\n",
       " 'crap',\n",
       " 'crappy',\n",
       " 'craps',\n",
       " 'crash',\n",
       " 'crashed',\n",
       " 'crashes',\n",
       " 'crashing',\n",
       " 'crass',\n",
       " 'craven',\n",
       " 'cravenly',\n",
       " 'craze',\n",
       " 'crazily',\n",
       " 'craziness',\n",
       " 'crazy',\n",
       " 'creak',\n",
       " 'creaking',\n",
       " 'creaks',\n",
       " 'credulous',\n",
       " 'creep',\n",
       " 'creeping',\n",
       " 'creeps',\n",
       " 'creepy',\n",
       " 'crept',\n",
       " 'crime',\n",
       " 'criminal',\n",
       " 'cringe',\n",
       " 'cringed',\n",
       " 'cringes',\n",
       " 'cripple',\n",
       " 'crippled',\n",
       " 'cripples',\n",
       " 'crippling',\n",
       " 'crisis',\n",
       " 'critic',\n",
       " 'critical',\n",
       " 'criticism',\n",
       " 'criticisms',\n",
       " 'criticize',\n",
       " 'criticized',\n",
       " 'criticizing',\n",
       " 'critics',\n",
       " 'cronyism',\n",
       " 'crook',\n",
       " 'crooked',\n",
       " 'crooks',\n",
       " 'crowded',\n",
       " 'crowdedness',\n",
       " 'crude',\n",
       " 'cruel',\n",
       " 'crueler',\n",
       " 'cruelest',\n",
       " 'cruelly',\n",
       " 'cruelness',\n",
       " 'cruelties',\n",
       " 'cruelty',\n",
       " 'crumble',\n",
       " 'crumbling',\n",
       " 'crummy',\n",
       " 'crumple',\n",
       " 'crumpled',\n",
       " 'crumples',\n",
       " 'crush',\n",
       " 'crushed',\n",
       " 'crushing',\n",
       " 'cry',\n",
       " 'culpable',\n",
       " 'culprit',\n",
       " 'cumbersome',\n",
       " 'cunt',\n",
       " 'cunts',\n",
       " 'cuplrit',\n",
       " 'curse',\n",
       " 'cursed',\n",
       " 'curses',\n",
       " 'curt',\n",
       " 'cuss',\n",
       " 'cussed',\n",
       " 'cutthroat',\n",
       " 'cynical',\n",
       " 'cynicism',\n",
       " 'd*mn',\n",
       " 'damage',\n",
       " 'damaged',\n",
       " 'damages',\n",
       " 'damaging',\n",
       " 'damn',\n",
       " 'damnable',\n",
       " 'damnably',\n",
       " 'damnation',\n",
       " 'damned',\n",
       " 'damning',\n",
       " 'damper',\n",
       " 'danger',\n",
       " 'dangerous',\n",
       " 'dangerousness',\n",
       " 'dark',\n",
       " 'darken',\n",
       " 'darkened',\n",
       " 'darker',\n",
       " 'darkness',\n",
       " 'dastard',\n",
       " 'dastardly',\n",
       " 'daunt',\n",
       " 'daunting',\n",
       " 'dauntingly',\n",
       " 'dawdle',\n",
       " 'daze',\n",
       " 'dazed',\n",
       " 'dead',\n",
       " 'deadbeat',\n",
       " 'deadlock',\n",
       " 'deadly',\n",
       " 'deadweight',\n",
       " 'deaf',\n",
       " 'dearth',\n",
       " 'death',\n",
       " 'debacle',\n",
       " 'debase',\n",
       " 'debasement',\n",
       " 'debaser',\n",
       " 'debatable',\n",
       " 'debauch',\n",
       " 'debaucher',\n",
       " 'debauchery',\n",
       " 'debilitate',\n",
       " 'debilitating',\n",
       " 'debility',\n",
       " 'debt',\n",
       " 'debts',\n",
       " 'decadence',\n",
       " 'decadent',\n",
       " 'decay',\n",
       " 'decayed',\n",
       " 'deceit',\n",
       " 'deceitful',\n",
       " 'deceitfully',\n",
       " 'deceitfulness',\n",
       " 'deceive',\n",
       " 'deceiver',\n",
       " 'deceivers',\n",
       " 'deceiving',\n",
       " 'deception',\n",
       " 'deceptive',\n",
       " 'deceptively',\n",
       " 'declaim',\n",
       " 'decline',\n",
       " 'declines',\n",
       " 'declining',\n",
       " 'decrement',\n",
       " 'decrepit',\n",
       " 'decrepitude',\n",
       " 'decry',\n",
       " 'defamation',\n",
       " 'defamations',\n",
       " 'defamatory',\n",
       " 'defame',\n",
       " 'defect',\n",
       " 'defective',\n",
       " 'defects',\n",
       " 'defensive',\n",
       " 'defiance',\n",
       " 'defiant',\n",
       " 'defiantly',\n",
       " 'deficiencies',\n",
       " 'deficiency',\n",
       " 'deficient',\n",
       " 'defile',\n",
       " 'defiler',\n",
       " 'deform',\n",
       " 'deformed',\n",
       " 'defrauding',\n",
       " 'defunct',\n",
       " 'defy',\n",
       " 'degenerate',\n",
       " 'degenerately',\n",
       " 'degeneration',\n",
       " 'degradation',\n",
       " 'degrade',\n",
       " 'degrading',\n",
       " 'degradingly',\n",
       " 'dehumanization',\n",
       " 'dehumanize',\n",
       " 'deign',\n",
       " 'deject',\n",
       " 'dejected',\n",
       " 'dejectedly',\n",
       " 'dejection',\n",
       " 'delay',\n",
       " 'delayed',\n",
       " 'delaying',\n",
       " 'delays',\n",
       " 'delinquency',\n",
       " 'delinquent',\n",
       " 'delirious',\n",
       " 'delirium',\n",
       " 'delude',\n",
       " 'deluded',\n",
       " 'deluge',\n",
       " 'delusion',\n",
       " 'delusional',\n",
       " 'delusions',\n",
       " 'demean',\n",
       " 'demeaning',\n",
       " 'demise',\n",
       " 'demolish',\n",
       " 'demolisher',\n",
       " 'demon',\n",
       " 'demonic',\n",
       " 'demonize',\n",
       " 'demonized',\n",
       " 'demonizes',\n",
       " 'demonizing',\n",
       " 'demoralize',\n",
       " 'demoralizing',\n",
       " 'demoralizingly',\n",
       " 'denial',\n",
       " 'denied',\n",
       " 'denies',\n",
       " 'denigrate',\n",
       " 'denounce',\n",
       " 'dense',\n",
       " 'dent',\n",
       " 'dented',\n",
       " 'dents',\n",
       " 'denunciate',\n",
       " 'denunciation',\n",
       " 'denunciations',\n",
       " 'deny',\n",
       " 'denying',\n",
       " 'deplete',\n",
       " 'deplorable',\n",
       " 'deplorably',\n",
       " 'deplore',\n",
       " 'deploring',\n",
       " 'deploringly',\n",
       " 'deprave',\n",
       " 'depraved',\n",
       " 'depravedly',\n",
       " 'deprecate',\n",
       " 'depress',\n",
       " 'depressed',\n",
       " 'depressing',\n",
       " 'depressingly',\n",
       " 'depression',\n",
       " 'depressions',\n",
       " 'deprive',\n",
       " 'deprived',\n",
       " 'deride',\n",
       " 'derision',\n",
       " 'derisive',\n",
       " 'derisively',\n",
       " 'derisiveness',\n",
       " 'derogatory',\n",
       " 'desecrate',\n",
       " 'desert',\n",
       " 'desertion',\n",
       " 'desiccate',\n",
       " 'desiccated',\n",
       " 'desititute',\n",
       " 'desolate',\n",
       " 'desolately',\n",
       " 'desolation',\n",
       " 'despair',\n",
       " 'despairing',\n",
       " 'despairingly',\n",
       " 'desperate',\n",
       " 'desperately',\n",
       " 'desperation',\n",
       " 'despicable',\n",
       " 'despicably',\n",
       " ...]"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "dict_n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [],
   "source": [
    "# Read data using pandas\n",
    "user_cols=['Reviewers_Name','Rating','Review_Magazine','Review','Date']\n",
    "df_count = pd.read_csv(\"Homework3.txt\",sep=\"\\t\",header=None,names=user_cols)\n",
    "df_count['Rating'] = df_count['Rating'].replace(['fresh','rotten'], [1,0])\n",
    "df_count.Review=df_count.Review.astype(str)\n",
    "df_count_drop_na=df_count.dropna()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [],
   "source": [
    "reviews=df_count_drop_na[['Review']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [],
   "source": [
    "# count of positive and negative words that appeared in each message\n",
    "# net count which is calculated by positive count subtracting negative count. \n",
    "\n",
    "poscnt = []\n",
    "negcnt = []\n",
    "netcnt = []\n",
    "\n",
    "for nrow in range(0,len(reviews)):\n",
    "    \n",
    "    text = df_count_drop_na.Review[nrow].lower()\n",
    "    qa = 0\n",
    "    qb = 0\n",
    "\n",
    "    for word in dict_p :\n",
    "        if (word in text) :\n",
    "            qa = qa + 1\n",
    "\n",
    "    for word in dict_n :\n",
    "        if (word in text) :\n",
    "            qb = qb + 1\n",
    "\n",
    "    qc = qa - qb\n",
    "    \n",
    "    poscnt.append(qa)\n",
    "    negcnt.append(qb)\n",
    "    netcnt.append(qc)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review</th>\n",
       "      <th>poscnt</th>\n",
       "      <th>negcnt</th>\n",
       "      <th>netcnt</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Martin Scorsese's Les Miserables.</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>-3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Gangs of New York is to Fernando Wood's Manhat...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>You simply have to applaud the magnitude and a...</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>One of the most provocative films from Hollywo...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Gangs of New York is one of those haunting fai...</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>-6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2084</td>\n",
       "      <td>Parasite conjures up images of a creature whic...</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>-5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2085</td>\n",
       "      <td>An exhilarating rollercoaster ride that keeps ...</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2086</td>\n",
       "      <td>A masterpiece in storytelling. Parasite is a d...</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>-5</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2087</td>\n",
       "      <td>While it's hugely entertaining, Parasite is al...</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2088</td>\n",
       "      <td>Parasite is many things rolled into one: a sha...</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>-4</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2089 rows Ã— 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Review  poscnt  negcnt  \\\n",
       "0                     Martin Scorsese's Les Miserables.       0       3   \n",
       "1     Gangs of New York is to Fernando Wood's Manhat...       1       2   \n",
       "2     You simply have to applaud the magnitude and a...       3       0   \n",
       "3     One of the most provocative films from Hollywo...       1       1   \n",
       "4     Gangs of New York is one of those haunting fai...       2       8   \n",
       "...                                                 ...     ...     ...   \n",
       "2084  Parasite conjures up images of a creature whic...       2       7   \n",
       "2085  An exhilarating rollercoaster ride that keeps ...       3       3   \n",
       "2086  A masterpiece in storytelling. Parasite is a d...       2       7   \n",
       "2087  While it's hugely entertaining, Parasite is al...       3       3   \n",
       "2088  Parasite is many things rolled into one: a sha...       3       7   \n",
       "\n",
       "      netcnt  \n",
       "0         -3  \n",
       "1         -1  \n",
       "2          3  \n",
       "3          0  \n",
       "4         -6  \n",
       "...      ...  \n",
       "2084      -5  \n",
       "2085       0  \n",
       "2086      -5  \n",
       "2087       0  \n",
       "2088      -4  \n",
       "\n",
       "[2089 rows x 4 columns]"
      ]
     },
     "execution_count": 44,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_count_drop_na['poscnt'] = poscnt\n",
    "df_count_drop_na['negcnt'] = negcnt\n",
    "df_count_drop_na['netcnt'] = netcnt\n",
    "df_count_drop_na[['Review','poscnt','negcnt','netcnt']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "['neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'net',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'pos',\n",
       " 'net',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'neg',\n",
       " 'net',\n",
       " ...]"
      ]
     },
     "execution_count": 45,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "result = []\n",
    "pos=0\n",
    "neg=0\n",
    "net=0\n",
    "for num in netcnt:\n",
    "    if (num > 0):\n",
    "        result.append('pos')\n",
    "        pos+=1\n",
    "    elif (num < 0):\n",
    "        result.append('neg')\n",
    "        neg+=1\n",
    "    else:\n",
    "        result.append('net')\n",
    "        net+=1\n",
    "        \n",
    "result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_count_drop_na['result'] = result"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Review</th>\n",
       "      <th>poscnt</th>\n",
       "      <th>negcnt</th>\n",
       "      <th>netcnt</th>\n",
       "      <th>result</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <td>0</td>\n",
       "      <td>Martin Scorsese's Les Miserables.</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>-3</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>1</td>\n",
       "      <td>Gangs of New York is to Fernando Wood's Manhat...</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>-1</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2</td>\n",
       "      <td>You simply have to applaud the magnitude and a...</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>pos</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>3</td>\n",
       "      <td>One of the most provocative films from Hollywo...</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>net</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>4</td>\n",
       "      <td>Gangs of New York is one of those haunting fai...</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>-6</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2084</td>\n",
       "      <td>Parasite conjures up images of a creature whic...</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>-5</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2085</td>\n",
       "      <td>An exhilarating rollercoaster ride that keeps ...</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>net</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2086</td>\n",
       "      <td>A masterpiece in storytelling. Parasite is a d...</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>-5</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2087</td>\n",
       "      <td>While it's hugely entertaining, Parasite is al...</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>net</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <td>2088</td>\n",
       "      <td>Parasite is many things rolled into one: a sha...</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>-4</td>\n",
       "      <td>neg</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>2089 rows Ã— 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                                                 Review  poscnt  negcnt  \\\n",
       "0                     Martin Scorsese's Les Miserables.       0       3   \n",
       "1     Gangs of New York is to Fernando Wood's Manhat...       1       2   \n",
       "2     You simply have to applaud the magnitude and a...       3       0   \n",
       "3     One of the most provocative films from Hollywo...       1       1   \n",
       "4     Gangs of New York is one of those haunting fai...       2       8   \n",
       "...                                                 ...     ...     ...   \n",
       "2084  Parasite conjures up images of a creature whic...       2       7   \n",
       "2085  An exhilarating rollercoaster ride that keeps ...       3       3   \n",
       "2086  A masterpiece in storytelling. Parasite is a d...       2       7   \n",
       "2087  While it's hugely entertaining, Parasite is al...       3       3   \n",
       "2088  Parasite is many things rolled into one: a sha...       3       7   \n",
       "\n",
       "      netcnt result  \n",
       "0         -3    neg  \n",
       "1         -1    neg  \n",
       "2          3    pos  \n",
       "3          0    net  \n",
       "4         -6    neg  \n",
       "...      ...    ...  \n",
       "2084      -5    neg  \n",
       "2085       0    net  \n",
       "2086      -5    neg  \n",
       "2087       0    net  \n",
       "2088      -4    neg  \n",
       "\n",
       "[2089 rows x 5 columns]"
      ]
     },
     "execution_count": 47,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_count_drop_na[['Review','poscnt','negcnt','netcnt','result']]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x1a253ac210>"
      ]
     },
     "execution_count": 48,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x432 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "pie_label = ['positive', 'nagative', 'neutral']\n",
    "series = pd.Series([pos,neg,net], \n",
    "                   index=pie_label, \n",
    "                   name='sentiment output')\n",
    "series.plot.pie(figsize=(6, 6))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 49,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 51,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "labels = 'Positive', 'Negative', 'Neutral'\n",
    "sizes = list(df_count_drop_na.result.value_counts())\n",
    "fig = plt.figure()  \n",
    "plt.pie(sizes, labels=labels, autopct='%1.1f%%')\n",
    "plt.title('Sentiment Analysis')\n",
    "plt.axis('equal')\n",
    "\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.4"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
